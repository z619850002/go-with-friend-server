// Code generated by protoc-gen-go. DO NOT EDIT.
// source: game.proto

package elfgame

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import status "google.golang.org/genproto/googleapis/rpc/status"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Player struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Player) Reset()         { *m = Player{} }
func (m *Player) String() string { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()    {}
func (*Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_c970d7b6d16dae04, []int{0}
}
func (m *Player) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Player.Unmarshal(m, b)
}
func (m *Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Player.Marshal(b, m, deterministic)
}
func (dst *Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player.Merge(dst, src)
}
func (m *Player) XXX_Size() int {
	return xxx_messageInfo_Player.Size(m)
}
func (m *Player) XXX_DiscardUnknown() {
	xxx_messageInfo_Player.DiscardUnknown(m)
}

var xxx_messageInfo_Player proto.InternalMessageInfo

func (m *Player) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Session struct {
	Player               *Player  `protobuf:"bytes,1,opt,name=player,proto3" json:"player,omitempty"`
	Id                   string   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Session) Reset()         { *m = Session{} }
func (m *Session) String() string { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()    {}
func (*Session) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_c970d7b6d16dae04, []int{1}
}
func (m *Session) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Session.Unmarshal(m, b)
}
func (m *Session) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Session.Marshal(b, m, deterministic)
}
func (dst *Session) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Session.Merge(dst, src)
}
func (m *Session) XXX_Size() int {
	return xxx_messageInfo_Session.Size(m)
}
func (m *Session) XXX_DiscardUnknown() {
	xxx_messageInfo_Session.DiscardUnknown(m)
}

var xxx_messageInfo_Session proto.InternalMessageInfo

func (m *Session) GetPlayer() *Player {
	if m != nil {
		return m.Player
	}
	return nil
}

func (m *Session) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type State struct {
	Status               *status.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_c970d7b6d16dae04, []int{2}
}
func (m *State) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_State.Unmarshal(m, b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_State.Marshal(b, m, deterministic)
}
func (dst *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(dst, src)
}
func (m *State) XXX_Size() int {
	return xxx_messageInfo_State.Size(m)
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetStatus() *status.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type Step struct {
	X                    int32    `protobuf:"varint,1,opt,name=X,proto3" json:"X,omitempty"`
	Y                    int32    `protobuf:"varint,2,opt,name=Y,proto3" json:"Y,omitempty"`
	Player               *Player  `protobuf:"bytes,4,opt,name=player,proto3" json:"player,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Step) Reset()         { *m = Step{} }
func (m *Step) String() string { return proto.CompactTextString(m) }
func (*Step) ProtoMessage()    {}
func (*Step) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_c970d7b6d16dae04, []int{3}
}
func (m *Step) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Step.Unmarshal(m, b)
}
func (m *Step) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Step.Marshal(b, m, deterministic)
}
func (dst *Step) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Step.Merge(dst, src)
}
func (m *Step) XXX_Size() int {
	return xxx_messageInfo_Step.Size(m)
}
func (m *Step) XXX_DiscardUnknown() {
	xxx_messageInfo_Step.DiscardUnknown(m)
}

var xxx_messageInfo_Step proto.InternalMessageInfo

func (m *Step) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Step) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Step) GetPlayer() *Player {
	if m != nil {
		return m.Player
	}
	return nil
}

func init() {
	proto.RegisterType((*Player)(nil), "pytorch.elf.game.v1.Player")
	proto.RegisterType((*Session)(nil), "pytorch.elf.game.v1.Session")
	proto.RegisterType((*State)(nil), "pytorch.elf.game.v1.State")
	proto.RegisterType((*Step)(nil), "pytorch.elf.game.v1.Step")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GameClient is the client API for Game service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GameClient interface {
	Login(ctx context.Context, in *Player, opts ...grpc.CallOption) (*State, error)
	Logout(ctx context.Context, in *Player, opts ...grpc.CallOption) (*State, error)
	Play(ctx context.Context, in *Step, opts ...grpc.CallOption) (*Step, error)
	SetWhite(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Step, error)
	Resume(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Step, error)
	Test(ctx context.Context, in *State, opts ...grpc.CallOption) (*State, error)
	Grpc(ctx context.Context, in *Player, opts ...grpc.CallOption) (*State, error)
}

type gameClient struct {
	cc *grpc.ClientConn
}

func NewGameClient(cc *grpc.ClientConn) GameClient {
	return &gameClient{cc}
}

func (c *gameClient) Login(ctx context.Context, in *Player, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/pytorch.elf.game.v1.Game/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) Logout(ctx context.Context, in *Player, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/pytorch.elf.game.v1.Game/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) Play(ctx context.Context, in *Step, opts ...grpc.CallOption) (*Step, error) {
	out := new(Step)
	err := c.cc.Invoke(ctx, "/pytorch.elf.game.v1.Game/Play", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) SetWhite(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Step, error) {
	out := new(Step)
	err := c.cc.Invoke(ctx, "/pytorch.elf.game.v1.Game/SetWhite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) Resume(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Step, error) {
	out := new(Step)
	err := c.cc.Invoke(ctx, "/pytorch.elf.game.v1.Game/Resume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) Test(ctx context.Context, in *State, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/pytorch.elf.game.v1.Game/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) Grpc(ctx context.Context, in *Player, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/pytorch.elf.game.v1.Game/Grpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServer is the server API for Game service.
type GameServer interface {
	Login(context.Context, *Player) (*State, error)
	Logout(context.Context, *Player) (*State, error)
	Play(context.Context, *Step) (*Step, error)
	SetWhite(context.Context, *Player) (*Step, error)
	Resume(context.Context, *Session) (*Step, error)
	Test(context.Context, *State) (*State, error)
	Grpc(context.Context, *Player) (*State, error)
}

func RegisterGameServer(s *grpc.Server, srv GameServer) {
	s.RegisterService(&_Game_serviceDesc, srv)
}

func _Game_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pytorch.elf.game.v1.Game/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).Login(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pytorch.elf.game.v1.Game/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).Logout(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_Play_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Step)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).Play(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pytorch.elf.game.v1.Game/Play",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).Play(ctx, req.(*Step))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_SetWhite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).SetWhite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pytorch.elf.game.v1.Game/SetWhite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).SetWhite(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_Resume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).Resume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pytorch.elf.game.v1.Game/Resume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).Resume(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(State)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pytorch.elf.game.v1.Game/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).Test(ctx, req.(*State))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_Grpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).Grpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pytorch.elf.game.v1.Game/Grpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).Grpc(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

var _Game_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pytorch.elf.game.v1.Game",
	HandlerType: (*GameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Game_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Game_Logout_Handler,
		},
		{
			MethodName: "Play",
			Handler:    _Game_Play_Handler,
		},
		{
			MethodName: "SetWhite",
			Handler:    _Game_SetWhite_Handler,
		},
		{
			MethodName: "Resume",
			Handler:    _Game_Resume_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _Game_Test_Handler,
		},
		{
			MethodName: "Grpc",
			Handler:    _Game_Grpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game.proto",
}

func init() { proto.RegisterFile("game.proto", fileDescriptor_game_c970d7b6d16dae04) }

var fileDescriptor_game_c970d7b6d16dae04 = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0x41, 0x4f, 0xfa, 0x40,
	0x10, 0xc5, 0x29, 0xb4, 0xcb, 0x9f, 0xf9, 0x1b, 0x0f, 0xe3, 0x41, 0xac, 0x1e, 0x4c, 0x4f, 0xc6,
	0xc3, 0x12, 0xe1, 0x6e, 0x14, 0x4c, 0xb8, 0x10, 0x63, 0xb6, 0x26, 0x80, 0xb7, 0x5a, 0x86, 0xd2,
	0xa4, 0xb0, 0x9b, 0xdd, 0xc5, 0x84, 0x4f, 0xeb, 0x57, 0x31, 0x6c, 0x89, 0xf1, 0x00, 0xd5, 0x84,
	0xe3, 0xee, 0x7b, 0xf3, 0x9b, 0x37, 0x93, 0x01, 0xc8, 0x92, 0x25, 0x71, 0xa5, 0xa5, 0x95, 0x78,
	0xa6, 0x36, 0x56, 0xea, 0x74, 0xc1, 0xa9, 0x98, 0x73, 0xf7, 0xff, 0x71, 0x17, 0x9e, 0x67, 0x52,
	0x66, 0x05, 0x75, 0xb4, 0x4a, 0x3b, 0xc6, 0x26, 0x76, 0x6d, 0x4a, 0x77, 0xd4, 0x06, 0xf6, 0x52,
	0x24, 0x1b, 0xd2, 0x78, 0x0a, 0xf5, 0x7c, 0xd6, 0xf6, 0xae, 0xbd, 0x9b, 0x96, 0xa8, 0xe7, 0xb3,
	0xe8, 0x19, 0x9a, 0x31, 0x19, 0x93, 0xcb, 0x15, 0xf6, 0x80, 0x29, 0x67, 0x72, 0xf2, 0xff, 0xee,
	0x25, 0xdf, 0xd3, 0x83, 0x97, 0x1c, 0xb1, 0xb3, 0xee, 0x78, 0x8d, 0x6f, 0x5e, 0x0f, 0x82, 0xd8,
	0x26, 0x96, 0xf0, 0x16, 0x58, 0x19, 0xa1, 0x5d, 0x77, 0x34, 0xe4, 0x65, 0x38, 0xae, 0x55, 0xca,
	0x63, 0xa7, 0x88, 0x9d, 0x23, 0x1a, 0x83, 0x1f, 0x5b, 0x52, 0x78, 0x02, 0xde, 0xc4, 0x35, 0x0f,
	0x84, 0x37, 0xd9, 0xbe, 0xa6, 0xae, 0x38, 0x10, 0xde, 0xf4, 0x47, 0x3a, 0xff, 0xcf, 0xe9, 0xba,
	0x9f, 0x0d, 0xf0, 0x87, 0xc9, 0x92, 0xb0, 0x0f, 0xc1, 0x48, 0x66, 0xf9, 0x0a, 0xab, 0xca, 0xc2,
	0x70, 0xaf, 0xe8, 0xe6, 0x89, 0x6a, 0x38, 0x00, 0x36, 0x92, 0x99, 0x5c, 0xdb, 0x63, 0x20, 0xf7,
	0xe0, 0x6f, 0x7d, 0x78, 0x71, 0xc0, 0x45, 0x2a, 0x3c, 0x2c, 0x45, 0x35, 0x7c, 0x82, 0x7f, 0x31,
	0xd9, 0xf1, 0x22, 0xb7, 0x54, 0x1d, 0xa3, 0x92, 0x32, 0x00, 0x26, 0xc8, 0xac, 0x97, 0x84, 0x57,
	0xfb, 0x6d, 0xe5, 0x49, 0x54, 0x43, 0x1e, 0xc0, 0x7f, 0x25, 0x63, 0xb1, 0x62, 0xe0, 0x5f, 0x96,
	0xf1, 0x08, 0xfe, 0x50, 0xab, 0xf4, 0x88, 0x7d, 0xf6, 0x5b, 0x6f, 0x4d, 0x2a, 0xe6, 0xdb, 0xdf,
	0x77, 0xe6, 0x6e, 0xbd, 0xf7, 0x15, 0x00, 0x00, 0xff, 0xff, 0x37, 0x67, 0xfe, 0x6c, 0x27, 0x03,
	0x00, 0x00,
}
